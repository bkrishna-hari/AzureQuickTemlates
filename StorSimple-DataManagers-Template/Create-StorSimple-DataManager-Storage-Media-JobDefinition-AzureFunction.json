{
    "$schema": "http://schema.management.azure.com/schemas/2014-04-01-preview/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "tenantId": {
            "type": "string",
            "metadata": {
                "group": "Azure Active Directory settings",
                "description": "The tenant ID (guid) of the Azure Active Directory (AAD) tenant, where the service principal resides."
            }
        },
        "clientId": {
            "type": "string",
            "metadata": {
                "group": "Azure Active Directory settings",
                "description": "Client ID of AAD app which has permissions to KeyVault"
            }
        },
        "activeDirectoryKey": {
            "type": "string",
            "metadata": {
                "group": "Azure Active Directory settings",
                "description": "Client Secret of AAD app."
            }
        },
        "dataManagerName": {
            "type": "string",
            "metadata": {
                "group": "Data manager settings",
                "description": "StorSimple Data Manager name must be between 3 and 24 characters long, start with letter/number and contain lowercase letters, numbers or dash character."
            }
        },
        "dataSourceName": {
            "type": "string",
            "metadata": {
                "group": "Data source settings",
                "description": "A friendly name that will help you identify the data repo easily. The name store/repository name to be created."
            }
        },
        "dataSinkName": {
            "type": "string",
            "metadata": {
                "group": "Data sink settings",
                "description": "The name store/repository name to be created or updated. The name store/repository name to be created."
            }
        },
        "resourceId": {
            "type": "string",
            "metadata": {
                "group": "Data source settings",
                "description": "The first part of the registration key of the your StorSimple manager. Paste the registration key and only keep the first number (before the ':' symbol) in this field."
            }
        },
        "serviceEncryptionKey": {
            "type": "securestring",
            "metadata": {
                "group": "Data source settings",
                "description": "The Service Data Encryption Key of your StorSimple manager. This is the key that was generated when the first device was registered in your StorSimple manager."
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "group": "Data sink settings",
                "description": "The name must be between 3 and 24 characters long and use lowercase letters and numbers only."
            }
        },
        "mediaServiceName": {
            "type": "string",
            "metadata": {
                "group": "Data sink settings",
                "description": "The name must be between 3 and 24 characters long and use lowercase letters and numbers only."
            }
        },
        "jobDefinitionName": {
            "type": "string",
            "metadata": {
                "group": "Job definition settings",
                "description": "The name can only contain alpha-numeric characters."
            }
        },
        "deviceName": {
            "type": "string",
            "metadata": {
                "group": "Job definition settings",
                "description": "The device within StorSimple manager that contains your data. The name can only contain numbers or letters."
            }
        },
        "volumeName": {
            "type": "string",
            "metadata": {
                "group": "Job definition settings",
                "description": "The name can only contain numbers or letters."
            }
        },
        "rootDirectories": {
            "defaultValue": "\\",
            "type": "string",
            "metadata": {
                "group": "Job definition settings",
                "description": "The data can only allow either \\ or specific root directory"
            }
        },
        "fileNameFilter": {
            "defaultValue": "*",
            "type": "string",
            "metadata": {
                "group": "Job definition settings",
                "description": "The data can only allow either * or *.* or specific file filter"
            }
        },
        "backupChoice": {
            "defaultValue": "UseExistingLatest",
            "allowedValues": [
                "UseExistingLatest",
                "TakeNow"
            ],
            "type": "string",
            "metadata": {
                "group": "Job definition settings",
                "description": "TakeNow - A cloud snapshot for the specified volume will be taken for this job at runtime. UseExistingLatest - The latest existing copy of the volume on the cloud will be used for this job at runtime."
            }
        },
        "userConfirmation": {
            "defaultValue": "NotRequired",
            "allowedValues": [
                "NotRequired",
                "Required"
            ],
            "type": "string",
            "metadata": {
                "group": "Job definition settings",
                "description": "If you wish to see the estimates of the job (duration & data) before the job starts copying data, choose 'Required' option."
            }
        },
        "isDirectoryMode": {
            "defaultValue": false,
            "type": "bool",
            "metadata": {
                "group": "Job definition settings",
                "description": "If you wish you create multi file media assets that are mapped to the directories in your volume, choose 'true' option."
            }
        },
        "functionAppName": {
            "type": "string",
            "metadata": {
                "group": "Azure function app settings",
                "description": "The name of the function app in which the function has to be created."
            }
        }
    },
    "variables": {
        "subscriptionId": "[subscription().subscriptionId]",
        "storageAccountType": "Standard_GRS",
        "createJobDefitionFunctionName": "fnCreateJobDefinition",
        "triggerQueueMessagesFunctionName": "fnConvertMediaFiles"
    },
    "resources": [
        {
            "type": "Microsoft.Storage/storageAccounts",
            "sku": {
                "name": "[variables('storageAccountType')]"
            },
            "kind": "Storage",
            "name": "[toLower(parameters('storageAccountName'))]",
            "apiVersion": "2016-01-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "encryption": {
                    "services": {
                        "blob": {
                            "enabled": "false"
                        }
                    },
                    "keySource": "Microsoft.Storage"
                }
            }
        },
        {
            "type": "Microsoft.Media/mediaServices",
            "name": "[parameters('mediaServiceName')]",
            "apiVersion": "2015-10-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "storageAccounts": [
                    {
                        "isPrimary": true,
                        "id": "[resourceId('Microsoft.Storage/storageAccounts/', toLower(parameters('storageAccountName')))]"
                    }
                ]
            },
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', toLower(parameters('storageAccountName')))]"
            ]
        },
        {
            "type": "Microsoft.HybridData/dataManagers",
            "sku": {
                "name": "DS0",
                "tier": "Standard"
            },
            "name": "[parameters('dataManagerName')]",
            "apiVersion": "2016-06-01",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', toLower(parameters('storageAccountName')))]",
                "[concat('Microsoft.Media/mediaServices/', parameters('mediaServiceName'))]"
            ]
        },
        {
            "type": "Microsoft.Web/sites",
            "kind": "functionapp",
            "name": "[parameters('functionAppName')]",
            "apiVersion": "2016-03-01",
            "location": "[resourceGroup().location]",
            "properties": {
                "name": "[parameters('functionAppName')]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "AZUREWEBJOBSDASHBOARD",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', toLower(parameters('storageAccountName')),';AccountKey=',listKeys(resourceId(variables('subscriptionId'),resourceGroup().name,'Microsoft.Storage/storageAccounts', toLower(parameters('storageAccountName'))), '2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "AZUREWEBJOBSSTORAGE",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', toLower(parameters('storageAccountName')),';AccountKey=',listKeys(resourceId(variables('subscriptionId'),resourceGroup().name,'Microsoft.Storage/storageAccounts', toLower(parameters('storageAccountName'))), '2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~1"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', toLower(parameters('storageAccountName')),';AccountKey=',listKeys(resourceId(variables('subscriptionId'),resourceGroup().name,'Microsoft.Storage/storageAccounts', toLower(parameters('storageAccountName'))), '2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(parameters('functionAppName'))]"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "6.5.0"
                        },
                        {
                            "name": "MEDIA_ACCOUNT_NAME",
                            "value": "[parameters('mediaServiceName')]"
                        },
                        {
                            "name": "MEDIA_ACCOUNT_KEY",
                            "value": "[listKeys(resourceId('Microsoft.Media/mediaServices', parameters('mediaServiceName')), '2015-10-01').primaryKey]"
                        },
                        {
                            "name": "[concat(toUpper(parameters('functionAppName')), '_QUEUE_STORAGE')]",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', toLower(parameters('storageAccountName')),';AccountKey=',listKeys(resourceId(variables('subscriptionId'),resourceGroup().name,'Microsoft.Storage/storageAccounts', toLower(parameters('storageAccountName'))), '2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "SUBSCRIPTIONID",
                            "value": "[variables('subscriptionId')]"
                        },
                        {
                            "name": "TENANTID",
                            "value": "[parameters('tenantId')]"
                        },
                        {
                            "name": "CLIENTID",
                            "value": "[parameters('clientId')]"
                        },
                        {
                            "name": "ACTIVEDIRECTORYKEY",
                            "value": "[parameters('activeDirectoryKey')]"
                        },
                        {
                            "name": "RESOURCEGROUPNAME",
                            "value": "[resourceGroup().name]"
                        },
                        {
                            "name": "LOCATION",
                            "value": "[resourceGroup().location]"
                        },
                        {
                            "name": "DATAMANAGERNAME",
                            "value": "[parameters('dataManagerName')]"
                        },
                        {
                            "name": "DATASOURCENAME",
                            "value": "[parameters('dataSourceName')]"
                        },
                        {
                            "name": "RESOURCEID",
                            "value": "[parameters('resourceId')]"
                        },
                        {
                            "name": "SERVICEENCRYPTIONKEY",
                            "value": "[parameters('serviceEncryptionKey')]"
                        },
                        {
                            "name": "DATASINKNAME",
                            "value": "[parameters('dataSinkName')]"
                        },
                        {
                            "name": "STORAGEACCOUNTNAME",
                            "value": "[toLower(parameters('storageAccountName'))]"
                        },
                        {
                            "name": "STORAGEACCOUNTKEY",
                            "value": "[listKeys(resourceId(variables('subscriptionId'),resourceGroup().name,'Microsoft.Storage/storageAccounts', toLower(parameters('storageAccountName'))), '2015-05-01-preview').key1]"
                        },
                        {
                            "name": "JOBDEFINITIONNAME",
                            "value": "[parameters('jobDefinitionName')]"
                        },
                        {
                            "name": "DEVICENAME",
                            "value": "[parameters('deviceName')]"
                        },
                        {
                            "name": "VOLUMENAME",
                            "value": "[toLower(parameters('volumeName'))]"
                        },
                        {
                            "name": "ROOTDIRECTORIES",
                            "value": "[parameters('rootDirectories')]"
                        },
                        {
                            "name": "FILENAMEFILTER",
                            "value": "[parameters('fileNameFilter')]"
                        },
                        {
                            "name": "BACKUPCHOICE",
                            "value": "[parameters('backupChoice')]"
                        },
                        {
                            "name": "USERCONFIRMATION",
                            "value": "[parameters('userConfirmation')]"
                        },
                        {
                            "name": "ISDIRECTORYMODE",
                            "value": "[parameters('isDirectoryMode')]"
                        }
                    ]
                },
                "clientAffinityEnabled": false
            },
            "resources": [
                {
                    "type": "Microsoft.Web/sites/functions",
                    "name": "[concat(parameters('functionAppName'), '/', variables('createJobDefitionFunctionName'))]",
                    "apiVersion": "2015-08-01",
                    "properties": {
                        "config": {
                            "bindings": [
                                {
                                    "name": "myTimer",
                                    "type": "timerTrigger",
                                    "direction": "in",
                                    "schedule": "0 0/1 * * * *"
                                }
                            ],
                            "disabled": false
                        },
                        "files": {
                            "ConfigurationParams.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\nusing Newtonsoft.Json;\r\n\r\npublic class ConfigurationParams\r\n{\r\n    public string SubscriptionId { get; set; }    \r\n    public string TenantId { get; set; }\r\n    public string ClientId { get; set; }\r\n    public string ActiveDirectoryKey { get; set; }\r\n    public string ResourceGroupName { get; set; }\r\n    public string ResourceName { get; set; }\r\n}\r\n",
                            "Constants.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\n/// <summary>\r\n/// This class contains solution wide constants.\r\n/// </summary>\r\ninternal class Constants\r\n{\r\n    public const int ConnectionLimitMultiplier = 48;\r\n    public const int MaxServicePointIdleTime = 90000;\r\n    public const string TokenProvider = \"TokenProvider\";\r\n    public const string AccessToken = \"_accessToken\";\r\n    public const string AccessTokenType = \"_accessTokenType\";\r\n    public const string Expiration = \"_expiration\";\r\n    public const string Authorization = \"Authorization\";\r\n    public const string AuthorizationDelimiter = \" \";\r\n    public const string POST = \"POST\";\r\n    public const string GET = \"GET\";\r\n    public const string PUT = \"PUT\";\r\n    public const int IndentSpaces = 4;\r\n    public const string ApiVersion = \"api-version\";\r\n    public const string ContentTypeJson = \"application/json\";\r\n    public const string AzureAsyncOperation = \"Azure-AsyncOperation\";\r\n    public const string Location = \"Location\";\r\n    public const string Properties = \"properties\";\r\n    public const string JobStatus = \"jobStatus\";\r\n    public const string ItemsProcessed = \"itemsProcessed\";\r\n    public const string JobStages = \"jobStages\";\r\n    public const string Details = \"details\";\r\n    public const string ErrorDetails = \"errorDetails\";\r\n    public const string DataServiceInput = \"dataServiceInput\";\r\n    public const string DataTransformationJobInput = \"dataTransformationJobInput\";\r\n    public const string DataServiceLevel1Key = \"dataServiceLevel1Key\";\r\n    public const string DataServiceLevel2Key = \"dataServiceLevel2Key\";\r\n    public const string State = \"Enabled\";\r\n    public const string ServiceEncryptionKey = \"ServiceEncryptionKey\";\r\n    public const string StorageAccountAccessKey = \"StorageAccountAccessKey\";\r\n    public const string MediaServicesAccessKey = \"MediaServicesAccessKey\";\r\n    public const string StorageAccountAccessKeyForQueue = \"StorageAccountAccessKeyForQueue\";\r\n    public const string Algorithm = \"RSA1_5\";\r\n    public const int MinimumClaimValiditiyDurationInMinutes = 10;\r\n\r\n    // DOGFOOD/PARTNER endpoint\r\n    public const string FrontdoorUrl = \"https://management.azure.com\";\r\n\r\n    // TEST AAD endpoint\r\n    public const string AadUrl = \"https://login.microsoftonline.com\";\r\n    public const string TokenUrl = \"https://management.core.windows.net\";\r\n\r\n    // Resource provider settings\r\n    public const string ResourceProviderName = \"Microsoft.HybridData\";\r\n    public const string StorSimpleProviderName = \"Microsoft.StorSimple\";\r\n    public const string MediaProviderName = \"Microsoft.Media\";\r\n    public const string StorageProviderName = \"Microsoft.Storage\";\r\n    public const string StorSimpleDataStoreTypeName = \"Storsimple8000Series\";\r\n    public const string MediaDataStoreTypeName = \"AzureMediaServicesAccount\";\r\n    public const string StorageDataStoreTypeName = \"AzureStorageAccount\";\r\n    public const string ResourceProviderApiVersion = \"2016-06-01\";\r\n}",
                            "DataSinkInput.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\nusing Newtonsoft.Json;\r\nusing System.Collections.Generic;\r\n\r\npublic class DataSinkInput\r\n{\r\n    public string name { get; set; }\r\n    public string id { get; set; }\r\n    public string type { get; set; }\r\n    public DataSinkProperties properties { get; set; }\r\n}\r\npublic class DataSinkProperties\r\n{\r\n    public string repositoryId { get; set; }\r\n    public string dataStoreTypeId { get; set; }\r\n    public List<DataSinkCustomerSecret> customerSecrets { get; set; }\r\n    public DataSinkExtendedProperty extendedProperties { get; set; }\r\n    public string state { get; set; }\r\n}\r\npublic class DataSinkExtendedProperty\r\n{\r\n    public string storageAccountNameForQueue { get; set; }\r\n}\r\npublic class DataSinkCustomerSecret\r\n{\r\n    public string keyIdentifier { get; set; }\r\n    public string keyValue { get; set; }\r\n    public string algorithm { get; set; }\r\n}\r\n",
                            "DataSourceInput.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\nusing Newtonsoft.Json;\r\nusing System.Collections.Generic;\r\n\r\npublic class DataSourceInput\r\n{\r\n    public string name { get; set; }\r\n    public string id { get; set; }\r\n    public string type { get; set; }\r\n    public DataSourceProperties properties { get; set; }\r\n}\r\npublic class DataSourceProperties\r\n{\r\n    public string repositoryId { get; set; }\r\n    public string dataStoreTypeId { get; set; }\r\n    public string state { get; set; }\r\n    public DataSourceExtendedProperty extendedProperties { get; set; }\r\n    public List<DataSourceCustomerSecret> customerSecrets { get; set; }\r\n}\r\npublic class DataSourceExtendedProperty\r\n{\r\n    public string resourceId { get; set; }\r\n}\r\npublic class DataSourceCustomerSecret\r\n{\r\n    public string keyIdentifier { get; set; }\r\n    public string keyValue { get; set; }\r\n    public string algorithm { get; set; }\r\n}\r\n",
                            "DataTransformationInput.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing System.Text;\r\nusing System.Threading.Tasks;\r\n\r\npublic class Configuration\r\n{\r\n    public string subscriptionId { get; set; }\r\n    public string tenantId { get; set; }\r\n    public string clientId { get; set; }\r\n    public string activeDirectoryKey { get; set; }\r\n}\r\n\r\npublic class ResourceGroup\r\n{\r\n    public string name { get; set; }\r\n    public string location { get; set; }\r\n}\r\n\r\npublic class DataSource\r\n{\r\n    public string name { get; set; }\r\n    public string resourceId { get; set; }\r\n    public string serviceEncryptionKey { get; set; }\r\n}\r\n\r\npublic class DataSink\r\n{\r\n    public string name { get; set; }\r\n    public string type { get; set; }\r\n    public string storageAccountName { get; set; }\r\n    public string storageAccountKey { get; set; }\r\n    public string mediaServiceName { get; set; }\r\n    public string mediaServiceKey { get; set; }\r\n}\r\n\r\npublic class JobDefinition\r\n{\r\n    public string azureStorageType { get; set; }\r\n    public string backupChoice { get; set; }\r\n    public string containerName { get; set; }\r\n    public string deviceName { get; set; }\r\n    public string fileNameFilter { get; set; }\r\n    public string isDirectoryMode { get; set; }\r\n    public string name { get; set; }\r\n    public string rootDirectories { get; set; }\r\n    public string userConfirmation { get; set; }\r\n    public string volumeName { get; set; }\r\n}\r\n\r\npublic class DataTransformation\r\n{\r\n    public string name { get; set; }\r\n    public DataSource dataSource { get; set; }\r\n    public DataSink dataSink { get; set; }\r\n    public JobDefinition jobDefinition { get; set; }\r\n}\r\n\r\npublic class DataTransformationInput\r\n{\r\n    public Configuration configuration { get; set; }\r\n    public ResourceGroup resourceGroup { get; set; }\r\n    public DataTransformation dataTransformation { get; set; }\r\n}",
                            "DataTransformationJob.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Linq;\r\n\r\n/// <summary>\r\n/// This class is used to trigger and track a Data Transformation Job.\r\n/// </summary>\r\npublic class DataTransformationJob\r\n{\r\n    private static IServiceHelper _serviceHelper;\r\n    private readonly string _resourceGroup;\r\n    private readonly string _resourceName;\r\n\r\n    /// <summary>\r\n    /// The constructor initializes the service helper \r\n    /// which is used to trigger and track the job.\r\n    /// </summary>\r\n    /// <param name=\"configParams\">Configuration parameters.</param>\r\n    public DataTransformationJob(ConfigurationParams configParams)\r\n    {\r\n        _resourceGroup = configParams.ResourceGroupName;\r\n        _resourceName = configParams.ResourceName;\r\n        _serviceHelper = new DefaultServiceHelper(configParams);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method creates Data manager resource.\r\n    /// </summary>\r\n    /// <param name=\"resourceName\">Resource name</param>\r\n    internal void CreateDataManager(string resourceName,\r\n        string resourceGroupName, \r\n        string location)\r\n    {\r\n        // Create the payload to make the call to create data manager resource.\r\n        //string json = JsonConvert.SerializeObject();\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method creates new Data source\r\n    /// </summary>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"dataSourceInput\">Data source input</param>\r\n    /// <param name=\"dataSourceName\">data source name</param>\r\n    internal bool CreateDataSource(string resourceGroupName, \r\n        string resourceName, \r\n        DataSourceInput dataSourceInput, \r\n        string dataSourceName, \r\n        out string message)\r\n    {\r\n        // Create a payload to make the call to create data source.\r\n        string json = JsonConvert.SerializeObject(dataSourceInput);\r\n        return _serviceHelper.CreateDataStore(resourceGroupName, resourceName, json, dataSourceName, out message);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method creates new Data sink\r\n    /// </summary>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"dataSinkInput\">Data sink input.</param>\r\n    /// <param name=\"dataSinkName\">Data sink name.</param>\r\n    internal bool CreateDataSink(string resourceGroupName, \r\n        string resourceName, \r\n        DataSinkInput dataSinkInput, \r\n        string dataSinkName, \r\n        out string message)\r\n    {\r\n        // Create a payload to make the call to create data source.\r\n        string json = JsonConvert.SerializeObject(dataSinkInput);\r\n        return _serviceHelper.CreateDataStore(resourceGroupName, resourceName, json, dataSinkName, out message);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method creates new Job definition\r\n    /// </summary>\r\n    /// <param name=\"resourceGroupName\">Resource group name</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"jobDefinitionInput\">Job definition input.</param>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"message\">Message</param>\r\n    /// <returns></returns>\r\n    internal bool CreateJobDefinition(string resourceGroupName, \r\n        string resourceName, \r\n        JobDefinitionInput jobDefinitionInput, \r\n        string jobDefinitionName, \r\n        out string message)\r\n    {\r\n        // Create a payload to make the call to create data source.\r\n        string json = JsonConvert.SerializeObject(jobDefinitionInput);\r\n        return _serviceHelper.CreateJobDefinition(resourceGroupName, resourceName, json, jobDefinitionName, out message);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method returns public keys of resource.\r\n    /// </summary>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <returns>Data transformation input.</returns>\r\n    public PublicKeys GetPublicKeys()\r\n    {\r\n        var getResponse = _serviceHelper.GetPublicKeys(_resourceGroup, _resourceName);\r\n\r\n        if (getResponse == null)\r\n        {\r\n            //throw new WebJobException(\"Job definition entity is being returned as null.\");\r\n        }\r\n\r\n        JObject output = JObject.Parse(getResponse);\r\n        string dataServiceLevel1KeyString = output[Constants.Properties][Constants.DataServiceLevel1Key].ToString();\r\n        var dataServiceLevel1Key = JsonConvert.DeserializeObject<DataServiceLevel1Key>(dataServiceLevel1KeyString);\r\n        string dataServiceLevel2KeyString = output[Constants.Properties][Constants.DataServiceLevel2Key].ToString();\r\n        var dataServiceLevel2Key = JsonConvert.DeserializeObject<DataServiceLevel2Key>(dataServiceLevel2KeyString);\r\n        var publicKeys = new PublicKeys()\r\n        {\r\n            dataServiceLevel1Key = dataServiceLevel1Key,\r\n            dataServiceLevel2Key = dataServiceLevel2Key\r\n        };\r\n        return publicKeys;\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method triggers a Data Transformation Job.\r\n    /// </summary>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"runJobParams\">Parameters required to run the job.</param>\r\n    /// <param name=\"trackJobUrl\">Returns the url to track the job.</param>\r\n    /// <param name=\"jobStatusIntervalInSeconds\">Returns the ideal interval after which \r\n    /// the job status should be queried using TrackJobAsync.</param>\r\n    public void RunJobAsync(string jobDefinitionName,\r\n        DataServiceProperties runJobParams,\r\n        out string trackJobUrl,\r\n        out string jobStatusIntervalInSeconds)\r\n    {\r\n\r\n        // Create the payload to make the call to run the job.\r\n        string json = JsonConvert.SerializeObject(runJobParams);\r\n\r\n        _serviceHelper.RunJob(_resourceGroup,\r\n            _resourceName,\r\n            jobDefinitionName,\r\n            json,\r\n            out trackJobUrl,\r\n            out jobStatusIntervalInSeconds);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method returns the parameters with which the job definition is configured.\r\n    /// </summary>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <returns>Data transformation input.</returns>\r\n    public JobDefinitionInput GetJobDefinitionParameters(string jobDefinitionName)\r\n    {\r\n        var getResponse = _serviceHelper.GetJobDefinition(jobDefinitionName, _resourceGroup, _resourceName);\r\n\r\n        JObject output = JObject.Parse(getResponse);\r\n        string jobDefinitionInputString = output.ToString();\r\n        var jobDefinitionInput = JsonConvert.DeserializeObject<JobDefinitionInput>(jobDefinitionInputString);\r\n        return jobDefinitionInput;\r\n    }\r\n}\r\n",
                            "DefaultServiceHelper.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\nusing Microsoft.Rest;\r\nusing Microsoft.Rest.Azure.Authentication;\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Converters;\r\nusing Newtonsoft.Json.Serialization;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.Globalization;\r\nusing System.Linq;\r\nusing System.Net;\r\nusing System.Net.Http;\r\nusing System.Reflection;\r\nusing System.Runtime.Serialization.Formatters;\r\nusing System.Text;\r\nusing System.Threading;\r\n\r\n/// <summary>\r\n/// This is a helper class which sets up the HTTP client\r\n/// to make run and track job calls.\r\n/// </summary>\r\ninternal class DefaultServiceHelper : IServiceHelper\r\n{\r\n    public static string GetJobStatusInterval;\r\n    public static string GetPutInterval;\r\n    public static string GetRequestUrl;\r\n\r\n    private static HttpClient httpClient = null;\r\n    private static DateTimeOffset expirationTime;\r\n\r\n    private static string tenantId;\r\n    private static string clientId;\r\n    private static string secret;\r\n    private static string subscriptionId;\r\n\r\n    /// <summary>\r\n    /// Constuctor.\r\n    /// It initalizes the http client to make the REST calls.\r\n    /// </summary>\r\n    /// <param name=\"configParams\">Configuration parameters.</param>\r\n    public DefaultServiceHelper(ConfigurationParams configParams)\r\n    {\r\n        // Service point manager configuration.                                                                                        \r\n        ServicePointManager.DefaultConnectionLimit = Environment.ProcessorCount * Constants.ConnectionLimitMultiplier;\r\n        ServicePointManager.MaxServicePointIdleTime = Constants.MaxServicePointIdleTime;\r\n        ServicePointManager.UseNagleAlgorithm = false;\r\n        ServicePointManager.Expect100Continue = false;\r\n\r\n        tenantId = configParams.TenantId;\r\n        clientId = configParams.ClientId;\r\n        secret = configParams.ActiveDirectoryKey;\r\n        subscriptionId = configParams.SubscriptionId;\r\n\r\n        var credentials = GetCredentials();\r\n        InitializeHttpClient(credentials);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method initalizes the Http client.\r\n    /// </summary>\r\n    /// <param name=\"credentials\"></param>\r\n    private static void InitializeHttpClient(ServiceClientCredentials credentials)\r\n    {\r\n        // Fetching private fields and properties using reflection.\r\n        // This is required to construct the authorization header for the HTTP client.\r\n        PropertyInfo tokenProviderProperty = credentials.GetType().GetProperties(BindingFlags.NonPublic | BindingFlags.Instance).Single(pi => pi.Name == Constants.TokenProvider);\r\n        var tokenProvider = (ITokenProvider)tokenProviderProperty.GetValue(credentials, null);\r\n\r\n        FieldInfo accessTokenField = tokenProvider.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Single(pi => pi.Name == Constants.AccessToken);\r\n        string accessToken = (string)accessTokenField.GetValue(tokenProvider);\r\n\r\n        FieldInfo accessTokenTypeField = tokenProvider.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Single(pi => pi.Name == Constants.AccessTokenType);\r\n        string accessTokenType = (string)accessTokenTypeField.GetValue(tokenProvider);\r\n\r\n        FieldInfo expirationField = tokenProvider.GetType().GetFields(BindingFlags.NonPublic | BindingFlags.Instance).Single(pi => pi.Name == Constants.Expiration);\r\n        expirationTime = (DateTimeOffset)expirationField.GetValue(tokenProvider);\r\n\r\n        // Initialize the Http client.\r\n        httpClient = new HttpClient();\r\n        httpClient.DefaultRequestHeaders.Add(Constants.Authorization, accessTokenType + Constants.AuthorizationDelimiter + accessToken);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method retrieves the credentials.\r\n    /// </summary>\r\n    /// <returns></returns>\r\n    private static ServiceClientCredentials GetCredentials()\r\n    {\r\n        ServiceClientCredentials credentials;\r\n        try\r\n        {\r\n            credentials = ApplicationTokenProvider.LoginSilentAsync(tenantId, clientId, secret,\r\n                new ActiveDirectoryServiceSettings()\r\n                {\r\n                    AuthenticationEndpoint = new Uri(Constants.AadUrl),\r\n                    TokenAudience = new Uri(Constants.TokenUrl),\r\n                    ValidateAuthority = true,\r\n                }).Result;\r\n        }\r\n        catch (Exception e)\r\n        {\r\n            //throw new WebJobException(\"Invalid configuration params.\", e);\r\n            throw e;\r\n        }\r\n        return credentials;\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method appends the api version to the url.\r\n    /// </summary>\r\n    /// <param name=\"url\">Url.</param>\r\n    /// <param name=\"apiVersion\">Api version</param>\r\n    /// <returns>Url appended with the api version.</returns>\r\n    private static string AppendApiVersion(string url, string apiVersion = Constants.ResourceProviderApiVersion)\r\n    {\r\n        return !string.IsNullOrWhiteSpace(apiVersion) ? string.Concat(url, \"?\", Constants.ApiVersion, \"=\", apiVersion) : url;\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method deserializes an object from Json.\r\n    /// </summary>\r\n    /// <typeparam name=\"T\">The object to which the json will be deserialized.</typeparam>\r\n    /// <param name=\"json\">The json string.</param>\r\n    /// <returns>Deserialized object.</returns>\r\n    private static T FromJson<T>(string json)\r\n    {\r\n        var settings = new JsonSerializerSettings\r\n        {\r\n            ContractResolver = new CamelCasePropertyNamesContractResolver(),\r\n            Converters = new List<JsonConverter>\r\n            {\r\n                new StringEnumConverter { CamelCaseText = false },\r\n                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal },\r\n            },\r\n        };\r\n\r\n        return JsonConvert.DeserializeObject<T>(json, settings);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This method serializes an object to a json.\r\n    /// </summary>\r\n    /// <param name=\"objectToConvert\">The object to serialize.</param>\r\n    /// <returns>Serialized json stirng.</returns>\r\n    private static string ToJson(object objectToConvert)\r\n    {\r\n        var settings = new JsonSerializerSettings\r\n        {\r\n            TypeNameHandling = TypeNameHandling.Auto,\r\n            TypeNameAssemblyFormat = FormatterAssemblyStyle.Simple,\r\n        };\r\n\r\n        settings.Converters.Add(new StringEnumConverter());\r\n\r\n        return JsonConvert.SerializeObject(objectToConvert, Formatting.Indented, settings);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call to create new Data source\r\n    /// </summary>\r\n    /// <param name=\"resourceGroup\">Resource group.</param>\r\n    /// <param name=\"payload\">Paylaod for the REST call.</param>\r\n    public bool CreateDataStore(string resourceGroup, string resourceName, string payload, string dataStoreName, out string message)\r\n    {\r\n        string url = DefaultServiceHelperUrls.GetDataStoreUrl(Constants.FrontdoorUrl, subscriptionId, resourceGroup, resourceName, Constants.ResourceProviderName, dataStoreName);\r\n        message = SubmitRequest(url, payload, Constants.PUT);\r\n\r\n        if (message.ToUpper().Contains(\"REQUEST FAILED\"))\r\n            return false;\r\n\r\n        string getRequestUrl = message;\r\n        return GetDataRequestByUrl(getRequestUrl, out message);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call to create new Job definition\r\n    /// </summary>\r\n    /// <param name=\"resourceGroup\">Resource group name</param>\r\n    /// <param name=\"resourceName\">Resource name</param>\r\n    /// <param name=\"payload\">Payload</param>\r\n    /// <param name=\"jobDefinitionName\">Job Definition name</param>\r\n    /// <param name=\"message\">Message</param>\r\n    /// <returns></returns>\r\n    public bool CreateJobDefinition(string resourceGroup, string resourceName, string payload, string jobDefinitionName, out string message)\r\n    {\r\n        string url = DefaultServiceHelperUrls.GetJobDefinitionUrl(Constants.FrontdoorUrl, subscriptionId, resourceGroup, resourceName, Constants.ResourceProviderName, jobDefinitionName);\r\n        message = SubmitRequest(url, payload, Constants.PUT);\r\n\r\n        if (message.ToUpper().Contains(\"REQUEST FAILED\"))\r\n            return false;\r\n\r\n        string getRequestUrl = message;\r\n        return GetDataRequestByUrl(getRequestUrl, out message);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for running the job.\r\n    /// </summary>\r\n    /// <param name=\"resourceGroup\">Resource group.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"payload\">Payload for the REST call.</param>\r\n    /// <param name=\"trackJobUrl\">Returns the url to track the job.</param>\r\n    /// <param name=\"interval\">Returns the ideal interval after \r\n    /// which the job should be tracked.</param>\r\n    public void RunJob(string resourceGroup, string resourceName, string jobDefinitionName, string payload, out string trackJobUrl, out string interval)\r\n    {\r\n        string url = DefaultServiceHelperUrls.GetRunJobUrl(Constants.FrontdoorUrl, subscriptionId, resourceGroup, resourceName, Constants.ResourceProviderName, jobDefinitionName);\r\n        trackJobUrl = SubmitRequest(url, payload, Constants.POST);\r\n        interval = GetJobStatusInterval;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for retrieving the data transformation object info by Url\r\n    /// </summary>\r\n    /// <param name=\"url\">Url.</param>\r\n    /// <param name=\"message\">Message.</param>\r\n    /// <returns></returns>\r\n    public bool GetDataRequestByUrl(string url, out string message)\r\n    {\r\n        do\r\n        {\r\n            int retryInterval;\r\n            bool isConverted = int.TryParse(GetPutInterval, out retryInterval);\r\n\r\n            if (!isConverted)\r\n                retryInterval = 10;\r\n\r\n            Thread.Sleep(retryInterval * 1000);\r\n            message = SubmitRequest(url, null, Constants.GET);\r\n\r\n            if (message.ToUpper().Contains(\"REQUEST FAILED.\"))\r\n                return false;\r\n\r\n            url = GetRequestUrl;\r\n        }\r\n        while (string.IsNullOrEmpty(message));\r\n\r\n        return true;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for tracking the job.\r\n    /// </summary>\r\n    /// <param name=\"url\">Track job url.</param>\r\n    /// <returns>Response</returns>\r\n    public string TrackJob(string url)\r\n    {\r\n        // A new claim needs to be generated in case the current claim expires.\r\n        // Current claim is valid only for an hour.\r\n        if (expirationTime.Subtract(DateTime.UtcNow).TotalMinutes < Constants.MinimumClaimValiditiyDurationInMinutes)\r\n        {\r\n            var credentials = GetCredentials();\r\n            InitializeHttpClient(credentials);\r\n        }\r\n\r\n        string response = SubmitRequest(url, string.Empty, Constants.GET);\r\n        return response;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for retrieving a job.\r\n    /// </summary>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"resourceGroup\">Resource group.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <returns>Response.</returns>\r\n    public string GetJob(string jobDefinitionName, string resourceGroup, string resourceName)\r\n    {\r\n        string url = DefaultServiceHelperUrls.GetRunJobUrl(Constants.FrontdoorUrl, subscriptionId, resourceGroup, resourceName, Constants.ResourceProviderName, jobDefinitionName);\r\n        return SubmitRequest(url, string.Empty, Constants.GET);\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for retrieving a job definition.\r\n    /// </summary>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"resourceGroup\">Resource group.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <returns>Response.</returns>\r\n    public string GetJobDefinition(string jobDefinitionName, string resourceGroup, string resourceName)\r\n    {\r\n        string url = DefaultServiceHelperUrls.GetJobDefinitionUrl(Constants.FrontdoorUrl, subscriptionId, resourceGroup, resourceName, Constants.ResourceProviderName, jobDefinitionName);\r\n        string response = SubmitRequest(url, string.Empty, Constants.GET);\r\n        return response;\r\n    }\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for retrieving public keys.\r\n    /// </summary>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"resourceGroup\">Resource group.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <returns>Response.</returns>\r\n    public string GetPublicKeys(string resourceGroup, string resourceName)\r\n    {\r\n        string url = DefaultServiceHelperUrls.GetPublicKeysUrl(Constants.FrontdoorUrl, subscriptionId, resourceGroup, resourceName, Constants.ResourceProviderName);\r\n        string response = string.Empty;\r\n        int cnt = 1;\r\n\r\n        do\r\n        {\r\n            Thread.Sleep(10 * 1000);\r\n            response = SubmitRequest(url, string.Empty, Constants.GET);\r\n            cnt++;\r\n        }\r\n        while (response.ToUpper().Contains(\"REQUEST FAILED.\") && cnt <= 6);\r\n\r\n        return response;\r\n    }\r\n\r\n    /// <summary>\r\n    /// This helper method to submit the request.\r\n    /// </summary>\r\n    /// <param name=\"url\">Url.</param>\r\n    /// <param name=\"payload\">Payload.</param>\r\n    /// <param name=\"methodType\">Method type (POST/GET).</param>\r\n    /// <returns>Response.</returns>\r\n    public static string SubmitRequest(string url, string payload, string methodType)\r\n    {\r\n        if (!url.Contains(Constants.ApiVersion))\r\n            url = AppendApiVersion(url);\r\n\r\n        var request = (HttpWebRequest)WebRequest.Create(url);\r\n        request.Method = methodType;\r\n        request.ContentType = Constants.ContentTypeJson;\r\n\r\n        HttpResponseMessage response = new HttpResponseMessage();\r\n\r\n        try\r\n        {\r\n            switch (methodType)\r\n            {\r\n                case Constants.GET:\r\n                    response = httpClient.GetAsync(url).Result;\r\n                    break;\r\n\r\n                case Constants.POST:\r\n                    response = httpClient.PostAsync(url,\r\n                        new StringContent(payload, Encoding.UTF8, Constants.ContentTypeJson))\r\n                        .Result;\r\n                    break;\r\n\r\n                case Constants.PUT:\r\n                    response = httpClient.PutAsync(url,\r\n                        new StringContent(payload, Encoding.UTF8, Constants.ContentTypeJson))\r\n                        .Result;\r\n                    break;\r\n            }\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            //throw new WebJobException(\"Failed while submitting request.\", e);\r\n            return string.Concat(\"Request failed. \", Environment.NewLine, \"Message: \", ex.Message);\r\n        }\r\n\r\n        // Un comment while debugging.\r\n        // PrintResponse(response);\r\n\r\n        if (response.StatusCode != HttpStatusCode.OK\r\n            && response.StatusCode != HttpStatusCode.Accepted)\r\n        {\r\n            return string.Concat(\"Request failed. Received HTTP \", response.StatusCode);\r\n            //throw new WebJobException(message);\r\n        }\r\n\r\n        if (string.Equals(methodType, Constants.GET))\r\n        {\r\n            if (response != null && response.Headers != null && response.Headers.Location != null)\r\n                GetRequestUrl = response.Headers.Location.ToString();\r\n\r\n            return response.Content.ReadAsStringAsync().Result;\r\n        }\r\n        else if (string.Equals(methodType, Constants.PUT))\r\n        {\r\n            GetPutInterval = response.Headers.RetryAfter.ToString();\r\n            IEnumerable<string> values;\r\n            if (response.Headers.TryGetValues(Constants.Location, out values))\r\n            {\r\n                return values.First();\r\n            }\r\n        }\r\n        else if (string.Equals(methodType, Constants.POST))\r\n        {\r\n            GetJobStatusInterval = response.Headers.RetryAfter.ToString();\r\n            IEnumerable<string> values;\r\n            if (response.Headers.TryGetValues(Constants.AzureAsyncOperation, out values))\r\n            {\r\n                return values.First();\r\n            }\r\n        }\r\n\r\n        return string.Empty;\r\n    }\r\n}\r\n",
                            "DefaultServiceHelperUrls.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\ninternal class DefaultServiceHelperUrls\r\n{\r\n    /// <summary>\r\n    /// This helper method returns the url for data source creation\r\n    /// </summary>\r\n    /// <param name=\"hostUrl\">Host url.</param>\r\n    /// <param name=\"subscriptionName\">Subscription name.</param>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"providerName\">Provider name.</param>\r\n    /// <returns>Data source url</returns>\r\n    internal static string GetDataStoreUrl(string hostUrl,\r\n        string subscriptionName,\r\n        string resourceGroupName,\r\n        string resourceName,\r\n        string providerName,\r\n        string dataStoreName)\r\n    {\r\n        return string.Join(\"/\", hostUrl,\r\n            \"subscriptions\", subscriptionName,\r\n            \"resourceGroups\", resourceGroupName,\r\n            \"providers\", providerName,\r\n            \"dataManagers\", resourceName,\r\n            \"dataStores\", dataStoreName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This helper method returns the url for data source repository\r\n    /// </summary>\r\n    /// <param name=\"subscriptionName\">Subscription name.</param>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"providerName\">Provider name.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <returns>Data source repository url</returns>\r\n    internal static string GetDataSourceRepositoryUrl(string subscriptionName,\r\n        string resourceGroupName,\r\n        string providerName,\r\n        string resourceName)\r\n    {\r\n        return string.Join(\"/\",\r\n            \"/subscriptions\", subscriptionName,\r\n            \"resourceGroups\", resourceGroupName,\r\n            \"providers\", providerName,\r\n            \"managers\", resourceName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This helper method returns the url for data sink repository\r\n    /// </summary>\r\n    /// <param name=\"subscriptionName\">Subscription name.</param>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"providerName\">Provider name.</param>\r\n    /// <param name=\"mediaServiceName\">Resource name.</param>\r\n    /// <returns>Data source repository url</returns>\r\n    internal static string GetMediaServiceDataSinkRepositoryUrl(string subscriptionName,\r\n        string resourceGroupName,\r\n        string providerName,\r\n        string mediaServiceName)\r\n    {\r\n        return string.Join(\"/\",\r\n            \"/subscriptions\", subscriptionName,\r\n            \"resourceGroups\", resourceGroupName,\r\n            \"providers\", providerName,\r\n            \"mediaservices\", mediaServiceName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This helper method returns the url for data sink repository\r\n    /// </summary>\r\n    /// <param name=\"subscriptionName\">Subscription name.</param>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"providerName\">Provider name.</param>\r\n    /// <param name=\"storageAccountName\">Resource name.</param>\r\n    /// <returns>Data source repository url</returns>\r\n    internal static string GetStorageAccountDataSinkRepositoryUrl(string subscriptionName,\r\n        string resourceGroupName,\r\n        string providerName,\r\n        string storageAccountName)\r\n    {\r\n        return string.Join(\"/\",\r\n            \"/subscriptions\", subscriptionName,\r\n            \"resourceGroups\", resourceGroupName,\r\n            \"providers\", providerName,\r\n            \"storageAccounts\", storageAccountName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This helper method returns the url for data store type\r\n    /// </summary>\r\n    internal static string GetDataStoreTypeUrl(string subscriptionName,\r\n        string resourceGroupName,\r\n        string providerName,\r\n        string resourceName,\r\n        string dataStoreTypeName)\r\n    {\r\n        return string.Join(\"/\",\r\n            \"/subscriptions\", subscriptionName,\r\n            \"resourceGroups\", resourceGroupName,\r\n            \"providers\", providerName,\r\n            \"dataManagers\", resourceName,\r\n            \"dataStoreTypes\", dataStoreTypeName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This helper method returns the url for data path (DataSource / DataSink)\r\n    /// </summary>\r\n    /// <param name=\"subscriptionName\">Subscription name.</param>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"providerName\">Resource provider name</param>\r\n    /// <param name=\"resourceName\">resoruce name</param>\r\n    /// <param name=\"dataSourceName\">Data source name (Data source / Data sink)</param>\r\n    /// <returns></returns>\r\n    internal static string GetDataPath(string subscriptionName,\r\n        string resourceGroupName,\r\n        string providerName,\r\n        string resourceName,\r\n        string dataSourceName)\r\n    {\r\n        return string.Join(\"/\",\r\n            \"/subscriptions\", subscriptionName,\r\n            \"resourcegroups\", resourceGroupName,\r\n            \"providers\", providerName,\r\n            \"dataManagers\", resourceName,\r\n            \"dataStores\", dataSourceName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This helper method returns the url for running the job.\r\n    /// </summary>\r\n    /// <param name=\"hostUrl\">Host url.</param>\r\n    /// <param name=\"subscriptionName\">Subscription name.</param>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"providerName\">Provider name.</param>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <returns>Run job url.</returns>\r\n    internal static string GetRunJobUrl(string hostUrl,\r\n            string subscriptionName,\r\n            string resourceGroupName,\r\n            string resourceName,\r\n            string providerName,\r\n            string jobDefinitionName)\r\n    {\r\n        return string.Join(\"/\", hostUrl,\r\n            \"subscriptions\", subscriptionName,\r\n            \"resourceGroups\", resourceGroupName,\r\n            \"providers\", providerName,\r\n            \"dataManagers\", resourceName,\r\n            \"dataServices/DataTransformation/jobDefinitions\",\r\n            jobDefinitionName, \"run\");\r\n    }\r\n\r\n    /// <summary>\r\n    /// This helper method returns the url for fetching the job definition.\r\n    /// </summary>\r\n    /// <param name=\"hostUrl\">Host url.</param>\r\n    /// <param name=\"subscriptionName\">Subscription name.</param>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"providerName\">Provider name.</param>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <returns>Run job url.</returns>\r\n    internal static string GetJobDefinitionUrl(string hostUrl,\r\n            string subscriptionName,\r\n            string resourceGroupName,\r\n            string resourceName,\r\n            string providerName,\r\n            string jobDefinitionName)\r\n    {\r\n        return string.Join(\"/\", hostUrl,\r\n            \"subscriptions\", subscriptionName,\r\n            \"resourceGroups\", resourceGroupName,\r\n            \"providers\", providerName,\r\n            \"dataManagers\", resourceName,\r\n            \"dataServices/DataTransformation/jobDefinitions\",\r\n            jobDefinitionName);\r\n    }\r\n\r\n    /// <summary>\r\n    /// This helper method returns the url for fetching the job definition.\r\n    /// </summary>\r\n    /// <param name=\"hostUrl\">Host url.</param>\r\n    /// <param name=\"subscriptionName\">Subscription name.</param>\r\n    /// <param name=\"resourceGroupName\">Resource group name.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"providerName\">Provider name.</param>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <returns>Run job url.</returns>\r\n    internal static string GetPublicKeysUrl(string hostUrl,\r\n            string subscriptionName,\r\n            string resourceGroupName,\r\n            string resourceName,\r\n            string providerName)\r\n    {\r\n        return string.Join(\"/\", hostUrl,\r\n            \"subscriptions\", subscriptionName,\r\n            \"resourceGroups\", resourceGroupName,\r\n            \"providers\", providerName,\r\n            \"dataManagers\", resourceName,\r\n            \"publicKeys/default\");\r\n    }\r\n}\r\n",
                            "IServiceHelper.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\n/// <summary>\r\n/// Service helper interface.\r\n/// </summary>\r\ninternal interface IServiceHelper\r\n{\r\n    /// <summary>\r\n    /// Helper method which makes the REST call to create new data source.\r\n    /// </summary>\r\n    /// <param name=\"resourceGroup\"></param>\r\n    /// <param name=\"resourceName\"></param>\r\n    /// <param name=\"dataManagerName\"></param>\r\n    /// <param name=\"payload\"></param>\r\n    bool CreateDataStore(string resourceGroup, string resourceName, string payload, string dataStoreName, out string message);\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call to create new job definition.\r\n    /// </summary>\r\n    /// <param name=\"resourceGroup\">Resource group name.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"payload\">Payload.</param>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"message\">Message.</param>\r\n    /// <returns></returns>\r\n    bool CreateJobDefinition(string resourceGroup, string resourceName, string payload, string jobDefinitionName, out string message);\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for retrieving public keys.\r\n    /// </summary>\r\n    /// <param name=\"resourceGroup\">Resource group.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    string GetPublicKeys(string resourceGroup, string resourceName);\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for retrieving resource data.\r\n    /// </summary>\r\n    /// <param name=\"getRequestUrl\">Get request url.</param>\r\n    /// <param name=\"methodType\">Method type.</param>\r\n    /// <param name=\"status\">Status.</param>\r\n    /// <param name=\"isReadyState\">Is resource ready state</param>\r\n    bool GetDataRequestByUrl(string url, out string message);\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for running the job.\r\n    /// </summary>\r\n    /// <param name=\"resourceGroup\">Resource group.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"payload\">Payload for the REST call.</param>\r\n    /// <param name=\"trackJobUrl\">Returns the url to track the job.</param>\r\n    /// <param name=\"interval\">Returns the ideal interval after \r\n    /// which the job should be tracked.</param>\r\n    void RunJob(string resourceGroup, string resourceName, string jobDefinitionName, string payload, out string trackJobUrl, out string interval);\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for tracking the job.\r\n    /// </summary>\r\n    /// <param name=\"url\">Track job url.</param>\r\n    /// <returns>Response</returns>\r\n    string TrackJob(string url);\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for retrieving a job.\r\n    /// </summary>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"resourceGroup\">Resource group.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <returns>Response.</returns>\r\n    string GetJob(string jobDefinitionName, string resourceGroup, string resourceName);\r\n\r\n    /// <summary>\r\n    /// Helper method which makes the REST call for retrieving a job definition.\r\n    /// </summary>\r\n    /// <param name=\"jobDefinitionName\">Job definition name.</param>\r\n    /// <param name=\"resourceGroup\">Resource group.</param>\r\n    /// <param name=\"resourceName\">Resource name.</param>\r\n    /// <returns>Response.</returns>\r\n    string GetJobDefinition(string jobDefinitionName, string resourceGroup, string resourceName);\r\n}\r\n",
                            "JobDefinitionInput.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\nusing Newtonsoft.Json;\r\nusing System.Collections.Generic;\r\n\r\npublic class DataServiceProperties\r\n{\r\n    public string azureStorageType { get; set; }\r\n    public string deviceName { get; set; }\r\n    public string containerName { get; set; }\r\n    public string fileNameFilter { get; set; }\r\n    public List<string> rootDirectories { get; set; }\r\n    public List<string> volumeNames { get; set; }\r\n    public string backupChoice { get; set; }\r\n    public string isDirectoryMode { get; set; }\r\n}\r\n\r\npublic class JobDefinitionProperties\r\n{\r\n    public string dataSourceId { get; set; }\r\n    public string dataSinkId { get; set; }\r\n    public string state { get; set; }\r\n    public string userConfirmation { get; set; }\r\n    public DataServiceProperties dataServiceInput { get; set; }\r\n}\r\n\r\npublic class JobDefinitionInput\r\n{\r\n    public string name { get; set; }\r\n    public string id { get; set; }\r\n    public string type { get; set; }\r\n    public JobDefinitionProperties properties { get; set; }\r\n}\r\n",
                            "PublicKeys.cs": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\npublic class PublicKeys\r\n{\r\n    public DataServiceLevel1Key dataServiceLevel1Key { get; set; }\r\n    public DataServiceLevel2Key dataServiceLevel2Key { get; set; }\r\n}\r\npublic class DataServiceLevel1Key\r\n{\r\n    public string keyModulus { get; set; }\r\n    public string keyExponent { get; set; }\r\n    public int encryptionChunkSizeInBytes { get; set; }\r\n}\r\n\r\npublic class DataServiceLevel2Key\r\n{\r\n    public string keyModulus { get; set; }\r\n    public string keyExponent { get; set; }\r\n    public int encryptionChunkSizeInBytes { get; set; }\r\n}",
                            "run.csx": "//---------------------------------------------------------------\r\n//      Copyright (c) Microsoft Corporation. All rights reserved.\r\n//----------------------------------------------------------------\r\n\r\n#load \"ConfigurationParams.cs\"\r\n#load \"Constants.cs\"\r\n#load \"DataSinkInput.cs\"\r\n#load \"DataSourceInput.cs\"\r\n#load \"DataTransformationInput.cs\"\r\n#load \"DataTransformationJob.cs\"\r\n#load \"DefaultServiceHelper.cs\"\r\n#load \"DefaultServiceHelperUrls.cs\"\r\n#load \"IServiceHelper.cs\"\r\n#load \"JobDefinitionInput.cs\"\r\n#load \"PublicKeys.cs\"\r\n#r \"System.Configuration\"\r\n\r\nusing Newtonsoft.Json;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing System.IO;\r\nusing System.Linq;\r\nusing System.Security.Cryptography;\r\nusing System.Text;\r\nusing System.Configuration;\r\n\r\npublic static void Run(TimerInfo myTimer, TraceWriter log)\r\n{\r\n    log.Info($\"C# Timer trigger function executed at: {DateTime.Now}\");\r\n\r\n    var appSettings = ConfigurationManager.AppSettings;\r\n\r\n    /// Data transformation Config params\r\n    string subscriptionId = appSettings[\"SUBSCRIPTIONID\"];\r\n    string tenantId = appSettings[\"TENANTID\"];\r\n    string clientId = appSettings[\"CLIENTID\"];\r\n    string activeDirectoryKey = appSettings[\"ACTIVEDIRECTORYKEY\"];\r\n\r\n    /// Resource group params\r\n    string resourceGroupName = appSettings[\"resourceGroupName\"];\r\n    string location = appSettings[\"LOCATION\"];\r\n\r\n    /// Data Manager params\r\n    string resourceName = appSettings[\"DATAMANAGERNAME\"];\r\n\r\n    /// Data Source params\r\n    string dataSourceName = appSettings[\"DATASOURCENAME\"];\r\n    string resourceId = appSettings[\"RESOURCEID\"];\r\n    string serviceEncryptionKey = appSettings[\"SERVICEENCRYPTIONKEY\"];\r\n\r\n    /// Data Sink params\r\n    string dataSinkName = appSettings[\"DATASINKNAME\"];\r\n    string storageAccountName = appSettings[\"STORAGEACCOUNTNAME\"];\r\n    string storageAccountKey = appSettings[\"STORAGEACCOUNTKEY\"];\r\n    string mediaServiceName = appSettings[\"MEDIA_ACCOUNT_NAME\"];\r\n    string mediaServiceKey = appSettings[\"MEDIA_ACCOUNT_KEY\"];\r\n\r\n    /// Job Definition params\r\n    string jobDefinitionName = appSettings[\"JOBDEFINITIONNAME\"];\r\n    string deviceName = appSettings[\"DEVICENAME\"];\r\n    string volumeName = appSettings[\"VOLUMENAME\"];\r\n    string rootDirectories = appSettings[\"ROOTDIRECTORIES\"];\r\n    string fileNameFilter = appSettings[\"FILENAMEFILTER\"];\r\n    string containerName = string.Empty;\r\n    string backupChoice = appSettings[\"BACKUPCHOICE\"];\r\n    string userConfirmation = appSettings[\"USERCONFIRMATION\"];\r\n    string isDirectoryMode = appSettings[\"ISDIRECTORYMODE\"];\r\n\r\n    string message = string.Empty;\r\n    bool isResourceCreated = false;\r\n\r\n    var configParams = new ConfigurationParams\r\n    {\r\n        SubscriptionId = subscriptionId,\r\n        TenantId = tenantId,\r\n        ClientId = clientId,\r\n        ActiveDirectoryKey = activeDirectoryKey,\r\n        ResourceGroupName = resourceGroupName,\r\n        ResourceName = resourceName,\r\n    };\r\n\r\n    // Initialize the Data Transformation Job instance.\r\n    DataTransformationJob dataTransformationJob = new DataTransformationJob(configParams);\r\n\r\n    // Read public keys\r\n    PublicKeys publicKeys = dataTransformationJob.GetPublicKeys();\r\n\r\n    // Encrypt Customer secrets\r\n    string encryptedServiceEncryptionKey = EncryptCustomerSecret(serviceEncryptionKey, publicKeys);\r\n\r\n    // Create StorSimple Data Source\r\n    DataSourceInput dataSourceInput = new DataSourceInput()\r\n    {\r\n        name = dataSourceName,\r\n        properties = new DataSourceProperties()\r\n        {\r\n            repositoryId = DefaultServiceHelperUrls.GetDataSourceRepositoryUrl(subscriptionId, resourceGroupName, Constants.StorSimpleProviderName, resourceId),\r\n            dataStoreTypeId = DefaultServiceHelperUrls.GetDataStoreTypeUrl(subscriptionId, resourceGroupName, Constants.ResourceProviderName, resourceName, Constants.StorSimpleDataStoreTypeName),\r\n            state = Constants.State,\r\n            extendedProperties = new DataSourceExtendedProperty()\r\n            {\r\n                resourceId = resourceId\r\n            },\r\n            customerSecrets = new List<DataSourceCustomerSecret>()\r\n            {\r\n                new DataSourceCustomerSecret() {keyIdentifier = Constants.ServiceEncryptionKey, keyValue = encryptedServiceEncryptionKey, algorithm = Constants.Algorithm }\r\n            }\r\n        }\r\n\r\n    };\r\n\r\n    // Create/Update data source\r\n    log.Info($\"Data source ({dataSourceName}) creation initiated.\");\r\n\r\n    isResourceCreated = dataTransformationJob.CreateDataSource(resourceGroupName, resourceName, dataSourceInput, dataSourceName, out message);\r\n    if (!isResourceCreated)\r\n    {\r\n        log.Info($\"Failed to create new Data source.\");\r\n        log.Info(message);\r\n        return;\r\n    }\r\n    else\r\n    {\r\n        log.Info($\"Data source ({dataSourceName}) created successfully.\");\r\n    }\r\n\r\n\r\n    string encryptedStorageAccountKey = EncryptCustomerSecret(storageAccountKey, publicKeys);\r\n    string encryptedMediaServiceKey = EncryptCustomerSecret(mediaServiceKey, publicKeys);\r\n\r\n    // Create StorSimple Data Sink (MediaService / StorageAccount)\r\n    DataSinkInput dataSinkInput = new DataSinkInput()\r\n    {\r\n        name = dataSinkName,\r\n        properties = new DataSinkProperties()\r\n        {\r\n            repositoryId = DefaultServiceHelperUrls.GetMediaServiceDataSinkRepositoryUrl(subscriptionId, resourceGroupName, Constants.MediaProviderName, mediaServiceName),\r\n            dataStoreTypeId = DefaultServiceHelperUrls.GetDataStoreTypeUrl(subscriptionId, resourceGroupName, Constants.ResourceProviderName, resourceName, Constants.MediaDataStoreTypeName),\r\n            state = Constants.State,\r\n            extendedProperties = new DataSinkExtendedProperty()\r\n            {\r\n                storageAccountNameForQueue = storageAccountName\r\n            },\r\n            customerSecrets = new List<DataSinkCustomerSecret>()\r\n                {\r\n                    new DataSinkCustomerSecret() {keyIdentifier = Constants.MediaServicesAccessKey, keyValue = encryptedMediaServiceKey, algorithm = Constants.Algorithm },\r\n                    new DataSinkCustomerSecret() {keyIdentifier = Constants.StorageAccountAccessKeyForQueue, keyValue = encryptedStorageAccountKey, algorithm = Constants.Algorithm }\r\n                }\r\n        }\r\n    };\r\n\r\n    // Create/Update data sink\r\n    log.Info($\"Data sink ({dataSinkName}) creation initiated.\");\r\n    isResourceCreated = dataTransformationJob.CreateDataSink(resourceGroupName, resourceName, dataSinkInput, dataSinkName, out message);\r\n    if (!isResourceCreated)\r\n    {\r\n        log.Info($\"Failed to create new Data sink.\");\r\n        log.Info(message);\r\n        return;\r\n    }\r\n    else\r\n    {\r\n        log.Info($\"Data sink ({dataSinkName}) created successfully.\");\r\n    }\r\n\r\n    JobDefinitionInput jobDefinitionInput = new JobDefinitionInput()\r\n    {\r\n        name = jobDefinitionName,\r\n        properties = new JobDefinitionProperties()\r\n        {\r\n            dataSourceId = DefaultServiceHelperUrls.GetDataPath(subscriptionId, resourceGroupName, Constants.ResourceProviderName, resourceName, dataSourceName),\r\n            dataSinkId = DefaultServiceHelperUrls.GetDataPath(subscriptionId, resourceGroupName, Constants.ResourceProviderName, resourceName, dataSinkName),\r\n            state = Constants.State,\r\n            userConfirmation = userConfirmation,\r\n            dataServiceInput = new DataServiceProperties()\r\n            {\r\n                backupChoice = backupChoice,\r\n                deviceName = deviceName,\r\n                fileNameFilter = fileNameFilter,\r\n                isDirectoryMode = isDirectoryMode,\r\n                rootDirectories = new List<string>() { rootDirectories },\r\n                volumeNames = new List<string>() { volumeName }\r\n            }\r\n        }\r\n    };\r\n\r\n    // Create/Update data sink\r\n    log.Info($\"Job definition ({jobDefinitionName}) creation initiated.\");\r\n    isResourceCreated = dataTransformationJob.CreateJobDefinition(resourceGroupName, resourceName, jobDefinitionInput, jobDefinitionName, out message);\r\n    if (!isResourceCreated)\r\n    {\r\n        log.Info($\"Failed to create new Job definition.\");\r\n        log.Info(message);\r\n        return;\r\n    }\r\n    else\r\n    {\r\n        log.Info($\"Job definition ({jobDefinitionName}) created successfully.\");\r\n    }\r\n\r\n    // Read Job definition params\r\n    DataServiceProperties dataServiceInput = dataTransformationJob.GetJobDefinitionParameters(jobDefinitionName).properties.dataServiceInput;\r\n\r\n    string retryAfter = string.Empty;\r\n    string trackJobUrl = string.Empty;\r\n    dataTransformationJob.RunJobAsync(jobDefinitionName, dataServiceInput, out trackJobUrl, out retryAfter);\r\n    log.Info($\"Job triggered successfully.\");\r\n    log.Info($\"Job url: {trackJobUrl}\");\r\n}\r\n\r\n/// <summary>\r\n/// This method converts customer secrets into encrypted value\r\n/// </summary>\r\n/// <param name=\"key\">Key.</param>\r\n/// <param name=\"publicKeys\">Public keys.</param>\r\n/// <returns></returns>\r\nprivate static string EncryptCustomerSecret(string key, PublicKeys publicKeys)\r\n{\r\n    byte[] Level1KeyModulus = Convert.FromBase64String(publicKeys.dataServiceLevel1Key.keyModulus);\r\n    byte[] Level1KeyExponent = Convert.FromBase64String(publicKeys.dataServiceLevel1Key.keyExponent);\r\n\r\n    byte[] sekArray = Encoding.UTF8.GetBytes(key);\r\n\r\n    string firstPass = EncryptUsingJsonWebKey(sekArray, Level1KeyModulus, Level1KeyExponent);\r\n\r\n    byte[] Level2KeyModulus = Convert.FromBase64String(publicKeys.dataServiceLevel2Key.keyModulus);\r\n    byte[] Level2KeyExponent = Convert.FromBase64String(publicKeys.dataServiceLevel2Key.keyExponent);\r\n\r\n    string encryptedKey = EncryptUsingJsonWebKey(Encoding.UTF8.GetBytes(firstPass), Level2KeyModulus, Level2KeyExponent);\r\n    return encryptedKey;\r\n}\r\n\r\n/// <summary>\r\n/// This method converts customer secrets into encrypted value\r\n/// </summary>\r\n/// <param name=\"plainTextArray\">Plain text byte array</param>\r\n/// <param name=\"levelKeyModulus\">Level key modulus</param>\r\n/// <param name=\"levelKeyExponent\">Level key exponent</param>\r\n/// <returns></returns>\r\npublic static string EncryptUsingJsonWebKey(byte[] plainTextArray, byte[] levelKeyModulus, byte[] levelKeyExponent)\r\n{\r\n    int start = 0;\r\n    StringBuilder builder = new StringBuilder();\r\n    List<byte> plainTextList = plainTextArray.ToList();\r\n    int remainingBytes = plainTextArray.Length;\r\n\r\n    while (remainingBytes >= 1)\r\n    {\r\n        int chunkLength = remainingBytes > 245 ? 245 : remainingBytes;\r\n        byte[] encryptedText;\r\n        byte[] plainChunkText = plainTextList.GetRange(start, chunkLength).ToArray();\r\n\r\n        using (var rsa = new RSACryptoServiceProvider())\r\n        {\r\n            var param = new RSAParameters() { Modulus = levelKeyModulus, Exponent = levelKeyExponent };\r\n            rsa.ImportParameters(param);\r\n            encryptedText = rsa.Encrypt(plainChunkText, false);\r\n        }\r\n\r\n        string encryptedSecret = Convert.ToBase64String(encryptedText);\r\n        builder.Append(encryptedSecret);\r\n        builder.Append(\":\");\r\n        start += chunkLength;\r\n        remainingBytes -= chunkLength;\r\n    }\r\n    builder.Remove(builder.Length - 1, 1);\r\n    return builder.ToString();\r\n}",
                            "project.json": "{\r\n  \"frameworks\": {\r\n    \"net46\":{\r\n      \"dependencies\": {\r\n        \"EntityFramework\": \"6.1.3\",\r\n        \"LinqKit\": \"1.1.7.2\",\r\n        \"Microsoft.Azure.WebJobs\": \"1.1.2\",\r\n        \"Microsoft.IdentityModel.Clients.ActiveDirectory\": \"2.28.1\",\r\n        \"Microsoft.Rest.ClientRuntime\": \"2.3.4\",\r\n        \"Microsoft.Rest.ClientRuntime.Azure.Authentication\": \"2.2.8-preview\",\r\n        \"Newtonsoft.Json\": \"6.0.8\"\r\n      }\r\n     }\r\n   }\r\n}"
                        }
                    },
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', parameters('functionAppName'))]"
                    ]
                },
                {
                    "type": "Microsoft.Web/sites/functions",
                    "name": "[concat(parameters('functionAppName'), '/', variables('triggerQueueMessagesFunctionName'))]",
                    "apiVersion": "2015-08-01",
                    "properties": {
                        "config": {
                            "bindings": [
                                {
                                    "name": "myQueueItem",
                                    "type": "queueTrigger",
                                    "direction": "in",
                                    "queueName": "[toLower(parameters('jobDefinitionName'))]",
                                    "connection": "[concat(toUpper(parameters('functionAppName')), '_QUEUE_STORAGE')]"
                                }
                            ],
                            "disabled": false
                        },
                        "files": {
                            "run.csx": "#load \"QueueData.cs\"\r\n\r\nusing System;\r\nusing Microsoft.WindowsAzure.MediaServices.Client;\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Linq;\r\nusing System.Configuration;\r\nusing System.Threading;\r\n\r\nprivate static CloudMediaContext cloudMediaContext = null;\r\n\r\npublic static void Run(QueueItem myQueueItem, TraceWriter log)\r\n{\r\n    string assetId = myQueueItem.TargetLocation.Substring(myQueueItem.TargetLocation.LastIndexOf(\"/\") + 1).Replace(\"asset-\", \"nb:cid:UUID:\");\r\n    \r\n    // Read Asset details & initiate Media Analytics\r\n    ReadMediaAssetAndRunEncoding(assetId, log);\r\n}\r\n\r\npublic static void ReadMediaAssetAndRunEncoding(string assetId, TraceWriter log)\r\n{    \r\n    string keyIdentifier = ConfigurationManager.AppSettings[\"MEDIA_ACCOUNT_NAME\"];\r\n    string keyValue = ConfigurationManager.AppSettings[\"MEDIA_ACCOUNT_KEY\"];\r\n    \r\n    MediaServicesCredentials _cachedCredentials = new MediaServicesCredentials(keyIdentifier, keyValue);\r\n    cloudMediaContext = new CloudMediaContext(_cachedCredentials);\r\n    \r\n    var assetInstance = from a in cloudMediaContext.Assets where a.Id == assetId select a;\r\n    IAsset asset = assetInstance.FirstOrDefault();\r\n\r\n    log.Info($\"Asset {asset}\");\r\n    log.Info($\"Asset Id: {asset.Id}\");\r\n    log.Info($\"Asset name: {asset.Name}\");\r\n    log.Info($\"Asset files: \");\r\n\r\n    foreach (IAssetFile fileItem in asset.AssetFiles)\r\n    {\r\n        log.Info($\"    Name: {fileItem.Name}\");\r\n        log.Info($\"    Size: {fileItem.ContentFileSize}\");\r\n    }\r\n\r\n    //submit job\r\n    EncodeToAdaptiveBitrateMP4s(asset, AssetCreationOptions.None, log);\r\n\r\n    log.Info($\"Encoding launched - function done\");\r\n}\r\n\r\nstatic public void EncodeToAdaptiveBitrateMP4s(IAsset asset, AssetCreationOptions options, TraceWriter log)\r\n{\r\n\r\n    // Prepare a job with a single task to transcode the specified asset\r\n    // into a multi-bitrate asset MP4 720p preset.\r\n    var encodingPreset = \"H264 Multiple Bitrate 720p\";\r\n\r\n    IJob job = cloudMediaContext.Jobs.Create(\"Encoding \" + asset.Name + \" to \" + encodingPreset);\r\n    \r\n    log.Info($\"Job created\");\r\n    \r\n    IMediaProcessor mesEncoder = (from p in cloudMediaContext.MediaProcessors where p.Name == \"Media Encoder Standard\" select p).ToList().OrderBy(mes => new Version(mes.Version)).LastOrDefault();\r\n    \r\n    log.Info($\"MES encoder\");\r\n    \r\n    ITask encodeTask = job.Tasks.AddNew(\"Encoding\", mesEncoder, encodingPreset, TaskOptions.None);\r\n    encodeTask.InputAssets.Add(asset);\r\n    encodeTask.OutputAssets.AddNew(asset.Name + \" as \" + encodingPreset, AssetCreationOptions.None);\r\n\r\n    log.Info($\"Submit job encoder\");\r\n    job.Submit();\r\n\r\n    //todo - change to queue based notifications\r\n    job.GetExecutionProgressTask(CancellationToken.None).Wait();\r\n    \r\n    \r\n}\r\n\r\n\r\npublic static string GetDynamicStreamingUrl(IAsset outputAsset)\r\n{\r\n    var daysForWhichStreamingUrlIsActive = 365;\r\n    \r\n    var accessPolicy = cloudMediaContext.AccessPolicies.Create(outputAsset.Name, TimeSpan.FromDays(daysForWhichStreamingUrlIsActive), AccessPermissions.Read | AccessPermissions.List);\r\n    var assetFiles = outputAsset.AssetFiles.ToList();\r\n    \r\n    var assetFile = assetFiles.Where(f => f.Name.ToLower().EndsWith(\".ism\")).FirstOrDefault();\r\n    if (assetFile != null)\r\n    {\r\n        var locator = cloudMediaContext.Locators.CreateLocator(LocatorType.OnDemandOrigin, outputAsset, accessPolicy);\r\n        Uri smoothUri = new Uri(locator.Path + assetFile.Name + \"/manifest\");\r\n        \r\n         \r\n        return smoothUri.ToString();\r\n    }\r\n\r\n    return string.Empty;\r\n}\r\n\r\npublic static bool RunIndexingJob(IAsset asset, TraceWriter log, string configurationFile = \"\")\r\n{\r\n    // Declare a new job.\r\n    var jobName = string.Format(\"Media Indexing of {0}\", asset.Name);\r\n    IJob job = cloudMediaContext.Jobs.Create(jobName);\r\n    job.Priority = 10;\r\n\r\n    // Get a reference to the Azure Media Indexer.\r\n    string MediaProcessorName = \"Azure Media Indexer\";\r\n    IMediaProcessor processor = GetLatestMediaProcessorByName(MediaProcessorName);\r\n\r\n    // Read configuration from file if specified.\r\n    string configuration = string.IsNullOrEmpty(configurationFile) ? \"\" : File.ReadAllText(configurationFile);\r\n\r\n    // Create a task with the encoding details, using a string preset.\r\n    ITask task = job.Tasks.AddNew(jobName, processor, configuration, TaskOptions.None);\r\n\r\n    // Specify the input asset to be indexed.\r\n    task.InputAssets.Add(asset);\r\n\r\n    // Add an output asset to contain the results of the job.\r\n    task.OutputAssets.AddNew(string.Format(\"{0} - Indexed\", asset.Name), AssetCreationOptions.None);\r\n\r\n    // Launch the job.\r\n    job.Submit();\r\n    log.Info($\"Media Indexer submitted (Job name: {jobName})\");\r\n\r\n    return true;\r\n}\r\n\r\npublic static IMediaProcessor GetLatestMediaProcessorByName(string mediaProcessorName)\r\n{\r\n    var processor = cloudMediaContext.MediaProcessors.Where(p => p.Name == mediaProcessorName).ToList().OrderBy(p => new Version(p.Version)).LastOrDefault();\r\n\r\n    if (processor == null)\r\n        throw new ArgumentException(string.Format(\"Unknown media processor\", mediaProcessorName));\r\n\r\n    return processor;\r\n}",
                            "project.json": "{\r\n  \"frameworks\": {\r\n    \"net46\":{\r\n      \"dependencies\": {\r\n        \"windowsazure.mediaservices\": \"3.6.0\"\r\n      }\r\n     }\r\n   }\r\n}",
                            "QueueData.cs": "public class QueueItem\r\n{\r\n    public string SourceLocation {get;set;}\r\n    public long SizeInBytes {get;set;}\r\n    public string Status {get;set;}\r\n    public string JobID {get;set;}\r\n    public string TargetLocation {get; set;}\r\n}"
                        }
                    },
                    "dependsOn": [
                        "[concat('Microsoft.Web/sites/', parameters('functionAppName'))]"
                    ]
                }
            ],
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', toLower(parameters('storageAccountName')))]",
                "[concat('Microsoft.Media/mediaServices/', parameters('mediaServiceName'))]",
                "[concat('Microsoft.HybridData/dataManagers/', parameters('dataManagerName'))]"
            ]
        }
    ]
}